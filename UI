--[
--UI Library Made By xS_Killus
--]

local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()
local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local InputService = game:GetService("UserInputService")
local CoreGuiService = game:GetService("CoreGui")
local ContentService = game:GetService("ContentProvider")

local Themes = {
	Light = {
		MainFrame = Color3.fromRGB(255,255,255),
		Minimise = Color3.fromRGB(255,106,0),
		MinimiseAccent = Color3.fromRGB(147,59,0),
		Maximise = Color3.fromRGB(25,255,0),
		MaximiseAccent = Color3.fromRGB(0,255,110),
		NavBar = Color3.fromRGB(124,37,255),
		NavBarAccent = Color3.fromRGB(255,255,255),
		NavBarInvert = Color3.fromRGB(30,30,30),
		TitleBar = Color3.fromRGB(124,37,255),
		TitleBarAccent = Color3.fromRGB(255,255,255),
		Overlay = Color3.fromRGB(124,37,255),
		Banner = Color3.fromRGB(255,255,255),
		BannerAccent = Color3.fromRGB(124,37,255),
		Content = Color3.fromRGB(124,37,255),
		Button = Color3.fromRGB(124,37,255),
		ButtonAccent = Color3.fromRGB(255,255,255),
		ChipSet = Color3.fromRGB(124,37,255),
		ChipSetAccent = Color3.fromRGB(255,255,255),
		DataTable = Color3.fromRGB(124,37,255),
		DataTableAccent = Color3.fromRGB(255,255,255),
		Slider = Color3.fromRGB(255,255,255),
		SliderAccent = Color3.fromRGB(124,37,255),
		Toggle = Color3.fromRGB(124,37,255),
		ToggleAccent = Color3.fromRGB(255,255,255),
		Dropdown = Color3.fromRGB(255,255,255),
		DropdownAccent = Color3.fromRGB(124,37,255),
		ColorPicker = Color3.fromRGB(255,255,255),
		ColorPickerAccent = Color3.fromRGB(124,37,255),
		TextField = Color3.fromRGB(124,37,255),
		TextFieldAccent = Color3.fromRGB(124,37,255),
	},
	Dark = {
		MainFrame = Color3.fromRGB(30,30,30),
		Minimise = Color3.fromRGB(255,106,0),
		MinimiseAccent = Color3.fromRGB(147,59,0),
		Maximise = Color3.fromRGB(25,255,0),
		MaximiseAccent = Color3.fromRGB(0,255,110),
		NavBar = Color3.fromRGB(55,55,55),
		NavBarAccent = Color3.fromRGB(255,255,255),
		NavBarInvert = Color3.fromRGB(235,235,235),
		TitleBar = Color3.fromRGB(55,55,55),
		TitleBarAccent = Color3.fromRGB(255,255,255),
		Overlay = Color3.fromRGB(175,175,175),
		Banner = Color3.fromRGB(55,55,55),
		BannerAccent = Color3.fromRGB(255,255,255),
		Content = Color3.fromRGB(85,85,85),
		Button = Color3.fromRGB(85,85,85),
		ButtonAccent = Color3.fromRGB(255,255,255),
		ChipSet = Color3.fromRGB(235,235,235),
		ChipSetAccent = Color3.fromRGB(85,85,85),
		DataTable = Color3.fromRGB(235,235,235),
		DataTableAccent = Color3.fromRGB(85,85,85),
		Slider = Color3.fromRGB(85,85,85),
		SliderAccent = Color3.fromRGB(235,235,235),
		Toggle = Color3.fromRGB(205,205,205),
		ToggleAccent = Color3.fromRGB(125,125,125),
		Dropdown = Color3.fromRGB(85,85,85),
		DropdownAccent = Color3.fromRGB(235,235,235),
		ColorPicker = Color3.fromRGB(85,85,85),
		ColorPickerAccent = Color3.fromRGB(235,235,235),
		TextField = Color3.fromRGB(175,175,175),
		TextFieldAccent = Color3.fromRGB(255,255,255),
	}
}

local Types = {
	"RoundFrame",
	"Shadow",
	"Circle",
	"CircleButton",
	"Frame",
	"Label",
	"Button",
	"SmoothButton",
	"Box",
	"ScrollingFrame",
	"Menu",
	"NavBar"
}

local ActualTypes = {
	RoundFrame = "ImageLabel",
	Shadow = "ImageLabel",
	Circle = "ImageLabel",
	CircleButton = "ImageButton",
	Frame = "Frame",
	Label = "TextLabel",
	Button = "TextButton",
	SmoothButton = "ImageButton",
	Box = "TextBox",
	ScrollingFrame = "ScrollingFrame",
	Menu = "ImageButton",
	NavBar = "ImageButton"
}

local Properties = {
	RoundFrame = {
		BackgroundTransparency = 1,
		Image = "http://www.roblox.com/asset/?id=5554237731",
		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = Rect.new(3, 3, 297, 297)
	},
	SmoothButton = {
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		Image = "http://www.roblox.com/asset/?id=5554237731",
		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = Rect.new(3, 3, 297, 297)
	},
	Shadow = {
		Name = "Shadow",
		BackgroundTransparency = 1,
		Image = "http://www.roblox.com/asset/?id=5554236805",
		ScaleType = Enum.ScaleType.Slice,
		SliceCenter = Rect.new(23, 23, 277, 277),
		Size = UDim2.fromScale(1, 1) + UDim2.fromOffset(30, 30),
		Position = UDim2.fromOffset(-15, -15)
	},
	Circle = {
		BackgroundTransparency = 1,
		Image = "http://www.roblox.com/asset/?id=5554831670"
	},
	CircleButton = {
		BackgroundTransparency = 1,
		AutoButtonColor = false,
		Image = "http://www.roblox.com/asset/?id=5554831670"
	},
	Frame = {
		BackgroundTransparency = 1,
		BorderSizePixel = 0,
		Size = UDim2.fromScale(1, 1)
	},
	Label = {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(5, 0),
		Size = UDim2.fromScale(1, 1) - UDim2.fromOffset(5, 0),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left
	},
	Button = {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(5,0),
		Size = UDim2.fromScale(1, 1) - UDim2.fromOffset(5, 0),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left
	},
	Box = {
		BackgroundTransparency = 1,
		Position = UDim2.fromOffset(5,0),
		Size = UDim2.fromScale(1, 1) - UDim2.fromOffset(5, 0),
		TextSize = 14,
		TextXAlignment = Enum.TextXAlignment.Left
	},
	ScrollingFrame = {
		BackgroundTransparency = 1,
		ScrollBarThickness = 0,
		CanvasSize = UDim2.fromScale(0, 0),
		Size = UDim2.fromScale(1, 1)
	},
	Menu = {
		Name = "More",
		AutoButtonColor = false,
		BackgroundTransparency = 1,
		Image = "http://www.roblox.com/asset/?id=5555108481",
		Size = UDim2.fromOffset(20, 20),
		Position = UDim2.fromScale(1, 0.5) - UDim2.fromOffset(25, 10)
	},
	NavBar = {
		Name = "SheetToggle",
		Image = "http://www.roblox.com/asset/?id=5576439039",
		BackgroundTransparency = 1,
		Size = UDim2.fromOffset(20, 20),
		Position = UDim2.fromOffset(5, 5),
		AutoButtonColor = false
	}
}

function FindType(String)
	for _, Type in next, Types do
		if Type:sub(1, #String):lower() == String:lower() then
			return Type
		end
	end
	return false
end

local Objects = {}

function Objects.new(Type)
	local TargetType = FindType(Type)

	if TargetType then
		local NewImage = Instance.new(ActualTypes[TargetType])

		if Properties[TargetType] then
			for Property, Value in next, Properties[TargetType] do
				NewImage[Property] = Value
			end
		end
		return NewImage
	else
		return Instance.new(Type)
	end
end

local function GetXY(GuiObject)
	local Max, May = GuiObject.AbsoluteSize.X, GuiObject.AbsoluteSize.Y
	local Px, Py = math.clamp(Mouse.X - GuiObject.AbsolutePosition.X, 0, Max), math.clamp(Mouse.Y - GuiObject.AbsolutePosition.Y, 0, May)
	return Px / Max, Py / May
end

local function CircleAnim(GuiObject, EndColour, StartColour)
	local PX, PY = GetXY(GuiObject)
	local Circle = Objects.new("Circle")
	Circle.Size = UDim2.fromScale(0, 0)
	Circle.Position = UDim2.fromScale(PX, PY)
	Circle.ImageColor3 = StartColour or GuiObject.ImageColor3
	Circle.ZIndex = 200
	Circle.Parent = GuiObject
	local Size = GuiObject.AbsoluteSize.X
	TweenService:Create(Circle, TweenInfo.new(1), {Position = UDim2.fromScale(PX, PY) - UDim2.fromOffset(Size / 2, Size / 2), ImageTransparency = 1, ImageColor3 = EndColour, Size = UDim2.fromOffset(Size, Size)}):Play()

	spawn(function()
		wait(2)
		Circle:Destroy()
	end)
end

local library = {}

local Styles = {
	[1] = "Normal",
	[2] = "Invert",
	[3] = "Sheets"
}

local ThisTheme

local NavBar = {
	Normal = function ()
		local NewNavBar = Objects.new("Round")
		NewNavBar.Name = "NavBar"
		NewNavBar.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(-10, 30)
		NewNavBar.Position = UDim2.fromOffset(5, 35)
		NewNavBar.ImageColor3 = ThisTheme.NavBar
		NewNavBar.ZIndex = 100

		local NavBarShadow = Objects.new("Shadow")
		NavBarShadow.ImageColor3 = ThisTheme.NavBar
		NavBarShadow.Parent = NewNavBar
		NavBarShadow.ZIndex = 100

		local NavBarContent = Objects.new("Frame")
		NavBarContent.Name = "Content"
		NavBarContent.Parent = NewNavBar

		NavBarContent.ChildAdded:Connect(function (Child)
			pcall(function ()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {TextTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child:FindFirstChildWhichIsA("ImageLabel"), TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				Child.TextColor3 = ThisTheme.NavBarAccent
			end)
			pcall(function()
				Child:FindFirstChildWhichIsA("ImageLabel").ImageColor3 = ThisTheme.NavBarAccent
			end)
			pcall(function()
				Child.ImageColor3 = ThisTheme.NavBarAccent
			end)
		end)
		local NavBarList = Objects.new("UIListLayout")
		NavBarList.FillDirection = Enum.FillDirection.Horizontal
		NavBarList.HorizontalAlignment = Enum.HorizontalAlignment.Left
		NavBarList.VerticalAlignment = Enum.VerticalAlignment.Center
		NavBarList.SortOrder = Enum.SortOrder.LayoutOrder
		NavBarList.Parent = NavBarContent

		local NavBarPadding = Objects.new("UIPadding")
		NavBarPadding.PaddingLeft = UDim.new(0, 5)
		NavBarPadding.Parent = NavBarContent

		return NewNavBar, NavBarContent
	end,
	Invert = function ()
		local NewNavBar = Objects.new("Round")
		NewNavBar.Name = "NavBar"
		NewNavBar.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(-10, 30)
		NewNavBar.Position = UDim2.fromOffset(5, 35)
		NewNavBar.ImageColor3 = ThisTheme.NavBarAccent
		NewNavBar.ImageTransparency = 1
		NewNavBar.ZIndex = 100

		local NavBarShadow = Objects.new("Shadow")
		NavBarShadow.ImageColor3 = ThisTheme.NavBarInvert
		NavBarShadow.ImageTransparency = 1
		NavBarShadow.Parent = NewNavBar
		NavBarShadow.ZIndex = 100

		TweenService:Create(NewNavBar, TweenInfo.new(1), {ImageTransparency = 0}):Play()
		TweenService:Create(NavBarShadow, TweenInfo.new(1), {ImageTransparency = 0}):Play()

		local NavBarContent = Objects.new("Frame")
		NavBarContent.Name = "Content"
		NavBarContent.Parent = NewNavBar

		NavBarContent.ChildAdded:Connect(function(Child)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {TextTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child:FindFirstChildWhichIsA("ImageLabel"), TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				Child.TextColor3 = ThisTheme.NavBar
			end)
			pcall(function()
				Child:FindFirstChildWhichIsA("ImageLabel").ImageColor3 = ThisTheme.NavBar
			end)
			pcall(function()
				Child.ImageColor3 = ThisTheme.NavBar
			end)
		end)
		local NavBarList = Objects.new("UIListLayout")
		NavBarList.FillDirection = Enum.FillDirection.Horizontal
		NavBarList.HorizontalAlignment = Enum.HorizontalAlignment.Left
		NavBarList.VerticalAlignment = Enum.VerticalAlignment.Center
		NavBarList.SortOrder = Enum.SortOrder.LayoutOrder
		NavBarList.Parent = NavBarContent

		local NavBarPadding = Objects.new("UIPadding")
		NavBarPadding.PaddingLeft = UDim.new(0, 5)
		NavBarPadding.Parent = NavBarContent

		return NewNavBar, NavBarContent
	end,
	Sheets = function ()
		local NewNavBar = Objects.new("Round")
		NewNavBar.ClipsDescendants = true
		NewNavBar.Name = "NavBar"
		NewNavBar.Size = UDim2.fromScale(0, 1) - UDim2.fromOffset(0, 30)
		NewNavBar.Position = UDim2.fromOffset(0, 30)
		NewNavBar.ImageColor3 = ThisTheme.NavBarAccent
		NewNavBar.ZIndex = 100

		local NavBarOverlay = Objects.new("Frame")
		NavBarOverlay.Name = "Overlay"
		NavBarOverlay.BackgroundColor3 = ThisTheme.NavBar
		NavBarOverlay.BackgroundTransparency = 1
		NavBarOverlay.Size = UDim2.fromScale(1, 1) - UDim2.fromOffset(0, 30)
		NavBarOverlay.Position = UDim2.fromOffset(0, 30)
		NavBarOverlay.ZIndex = 75

		local NavBarMenu = Objects.new("NavBar")
		NavBarMenu.ZIndex = 100

		local NavBarShadow = Objects.new("Shadow")
		NavBarShadow.ImageColor3 = ThisTheme.NavBar
		NavBarShadow.Parent = NewNavBar
		NavBarShadow.ZIndex = 100

		local Effect1, Effect2, Effect3 = Objects.new("Frame"), Objects.new("Frame"), Objects.new("Frame")

		Effect1.ZIndex = 100
		Effect2.ZIndex = 100
		Effect3.ZIndex = 100

		Effect1.BackgroundTransparency = 0
		Effect2.BackgroundTransparency = 0
		Effect3.BackgroundTransparency = 0

		Effect1.BackgroundColor3 = ThisTheme.NavBarAccent
		Effect2.BackgroundColor3 = ThisTheme.NavBarAccent
		Effect3.BackgroundColor3 = ThisTheme.NavBar

		Effect1.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(0, 5)
		Effect2.Size = UDim2.fromScale(0, 1) + UDim2.fromOffset(5, 0)
		Effect3.Size = UDim2.fromScale(0, 1) + UDim2.fromOffset(1, 0)

		Effect1.Position = UDim2.fromScale(0, 0)
		Effect2.Position = UDim2.fromScale(1, 0) - UDim2.fromOffset(5, 0)
		Effect3.Position = UDim2.fromScale(1, 0)

		Effect1.Parent = NewNavBar
		Effect2.Parent = NewNavBar
		Effect3.Parent = NewNavBar

		local NavBarContent = Objects.new("Frame")
		NavBarContent.Name = "Content"
		NavBarContent.Parent = NewNavBar

		local NavBarList = Objects.new("UIListLayout")
		NavBarList.FillDirection = Enum.FillDirection.Vertical
		NavBarList.HorizontalAlignment = Enum.HorizontalAlignment.Center
		NavBarList.VerticalAlignment = Enum.VerticalAlignment.Top
		NavBarList.SortOrder = Enum.SortOrder.LayoutOrder
		NavBarList.Parent = NavBarContent

		local NavBarPadding = Objects.new("UIPadding")
		NavBarPadding.PaddingLeft = UDim.new(0, 5)
		NavBarPadding.PaddingRight = UDim.new(0, 5)
		NavBarPadding.PaddingTop = UDim.new(0, 5)
		NavBarPadding.PaddingBottom = UDim.new(0, 5)
		NavBarPadding.Parent = NavBarContent

		NavBarContent.ChildAdded:Connect(function(Child)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {TextTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child, TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				local Children = #NavBarContent:GetChildren() - 2
				TweenService:Create(Child:FindFirstChildWhichIsA("ImageLabel"), TweenInfo.new(1), {ImageTransparency = (Children > 1) and 0.5 or 0}):Play()
			end)
			pcall(function()
				Child.Size = UDim2.fromScale(1,0) + UDim2.fromOffset(0, 30)
			end)
			pcall(function()
				Child:FindFirstChildWhichIsA("ImageLabel").ImageColor3 = ThisTheme.NavBar
			end)
			pcall(function()
				Child.TextColor3 = ThisTheme.NavBar
			end)
			pcall(function()
				Child.ImageColor3 = ThisTheme.NavBar
			end)
		end)
		return NewNavBar, NavBarContent, NavBarMenu,  NavBarOverlay
	end
}

local MainGUI

function TryAddMenu(Object, Menu, ReturnTable)
	local Menu = Menu
	local ReturnTable = ReturnTable
	ReturnTable.Object = Object
	local Total = 0

	table.foreach(Menu, function(_, Value)
		Total = Total + ((typeof(Value) == "function") and 1 or 0)
	end)
	if Total > 0 then
		local MenuToggle = false

		local MenuButton = Objects.new("Menu")
		MenuButton.ImageTransparency = 1
		MenuButton.Parent = Object

		TweenService:Create(MenuButton, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
		local Size = Total * 30 + ((Total + 1) * 2)

		local MenuBuild = Objects.new("Round")
		MenuBuild.Name = "Menu"
		MenuBuild.ImageColor3 = ThisTheme.ButtonAccent
		MenuBuild.Size = UDim2.fromOffset(120, 0)
		MenuBuild.Position = UDim2.fromOffset(MenuButton.AbsolutePosition.X,MenuButton.AbsolutePosition.Y) - UDim2.fromOffset(125, 5)
		MenuBuild.ZIndex = 100
		MenuBuild.ClipsDescendants = true
		MenuBuild.Parent = MainGUI

		MenuButton:GetPropertyChangedSignal("AbsolutePosition"):Connect(function()
			MenuBuild.Position = UDim2.fromOffset(MenuButton.AbsolutePosition.X,MenuButton.AbsolutePosition.Y) - UDim2.fromOffset(125, 5)
		end)
		local MenuContent = Objects.new("Frame")
		MenuContent.Name = "Content"
		MenuContent.Parent = MenuBuild

		local MenuList = Objects.new("UIListLayout")
		MenuList.Padding = UDim.new(0, 2)
		MenuList.Parent = MenuContent

		local MenuPadding = Objects.new("UIPadding")
		MenuPadding.PaddingTop = UDim.new(0, 2)
		MenuPadding.PaddingRight = UDim.new(0, 2)
		MenuPadding.PaddingLeft = UDim.new(0, 2)
		MenuPadding.PaddingBottom = UDim.new(0, 2)
		MenuPadding.Parent = MenuContent
		
		MenuButton.MouseButton1Down:Connect(function()
			MenuToggle = not MenuToggle
			TweenService:Create(MenuBuild, TweenInfo.new(0.15), {Size = MenuToggle and UDim2.fromOffset(120, Size) or UDim2.fromOffset(120, 0)}):Play()
		end)
		table.foreach(Menu, function(Option, Value)
			if typeof(Value) == "function" then
				local MenuOption = Objects.new("SmoothButton")
				MenuOption.Name = "MenuOption"
				MenuOption.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(0, 30)
				MenuOption.ImageColor3 = ThisTheme.Button
				MenuOption.ImageTransparency = 1
				MenuOption.ZIndex = 150
				MenuOption.Parent = MenuContent

				local OptionShadow = Objects.new("Shadow")
				OptionShadow.ImageColor3 = ThisTheme.Button
				OptionShadow.ImageTransparency = 1
				OptionShadow.Parent = MenuOption

				local OptionValue = Objects.new("Label")
				OptionValue.Name = "Value"
				OptionValue.Position = UDim2.fromScale(0, 0)
				OptionValue.Size = UDim2.fromScale(1, 1) - UDim2.fromOffset(5, 0)
				OptionValue.Text = Option
				OptionValue.TextColor3 = ThisTheme.Button
				OptionValue.Font = Enum.Font.Gotham
				OptionValue.TextSize = 12
				OptionValue.ZIndex = 150
				OptionValue.TextXAlignment = Enum.TextXAlignment.Right
				OptionValue.Parent = MenuOption

				MenuOption.MouseButton1Down:Connect(function()
					Value(ReturnTable)
					MenuToggle = false
					TweenService:Create(MenuBuild, TweenInfo.new(0.15), {Size = UDim2.fromOffset(120, 0)}):Play()
				end)
				MenuOption.MouseEnter:Connect(function()
					TweenService:Create(MenuOption, TweenInfo.new(0.15), {ImageTransparency = 0.8}):Play()
					TweenService:Create(OptionShadow, TweenInfo.new(0.15), {ImageTransparency = 0.8}):Play()
				end)
				MenuOption.MouseLeave:Connect(function()
					TweenService:Create(MenuOption, TweenInfo.new(0.15), {ImageTransparency = 1}):Play()
					TweenService:Create(OptionShadow, TweenInfo.new(0.15), {ImageTransparency = 1}):Play()
				end)
			end
		end)
		return true, MenuButton
	end
	return false
end

function CreateNewButton(ButtonConfig, Parent)
	local ButtonText = ButtonConfig.Text or "Button"
	local ButtonCallback = ButtonConfig.Callback or function() print("Button") end
	local Menu = ButtonConfig.Menu or {}

	local Button = Objects.new("SmoothButton")
	Button.Name = "Button"
	Button.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(0, 30)
	Button.ImageColor3 = ThisTheme.Button
	Button.ImageTransparency = 1
	Button.Parent = Parent

	local ButtonShadow = Objects.new("Shadow")
	ButtonShadow.ImageColor3 = ThisTheme.Button
	ButtonShadow.ImageTransparency = 1
	ButtonShadow.Parent = Button

	local ButtonLabel = Objects.new("Label")
	ButtonLabel.Text = ButtonText
	ButtonLabel.TextColor3 = ThisTheme.ButtonAccent
	ButtonLabel.Font = Enum.Font.GothamSemibold
	ButtonLabel.TextSize = 14
	ButtonLabel.ClipsDescendants = true
	ButtonLabel.TextTransparency = 1
	ButtonLabel.Parent = Button

	TweenService:Create(Button, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
	TweenService:Create(ButtonShadow, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
	TweenService:Create(ButtonLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

	Button.MouseButton1Down:Connect(function()
		CircleAnim(ButtonLabel, ThisTheme.ButtonAccent, ThisTheme.Button)
		ButtonCallback()
	end)
	local MenuAdded = TryAddMenu(Button, Menu, {})
	return Button, ButtonLabel
end

function library:Create(Config)
	local Style = (Config.Style and math.clamp(Config.Style, 1, 3)) or 1
	local Title = Config.Title or "BreakSkill Hub"
	local SizeX = Config.SizeX or 300
	local SizeY = Config.SizeY or 500
	local Theme = Config.Theme or "Light"
	local Overrides = Config.ColorOverrides or {}
	local Open = true

	Theme = Themes[Theme]
	ThisTheme = Theme

	for KeyOverride, ValueOverride in next, Overrides do
		ThisTheme[KeyOverride] = ValueOverride
	end
	pcall(function() OldInstance:Destroy() end)

	local function GetExploit()
        local Table = {}
        Table.Synapse = syn
        Table.ProtoSmasher = pebc_create
        Table.Sentinel = issentinelclosure
        Table.ScriptWare = getexecutorname
    
        for ExploitName, ExploitFunction in next, Table do
            if (ExploitFunction) then
                return ExploitName
            end
        end
        return "Undefined"
    end
	local ProtectFunctions = {}
	ProtectFunctions.Synapse = function(GuiObject) syn.protect_gui(GuiObject) GuiObject.Parent = CoreGuiService end
    ProtectFunctions.ProtoSmasher = function(GuiObject) GuiObject.Parent = get_hidden_gui() end
    ProtectFunctions.Sentinel = function(GuiObject) GuiObject.Parent = CoreGuiService end
    ProtectFunctions.ScriptWare = function(GuiObject) GuiObject.Parent = gethui() end
    ProtectFunctions.Undefined = function(GuiObject) GuiObject.Parent = CoreGuiService end

	local NewInstance = Objects.new("ScreenGui")
	NewInstance.Name = Title
	ProtectFunctions[GetExploit()](NewInstance)
	getgenv().OldInstance = NewInstance
	MainGUI = NewInstance

	local MainFrame = Objects.new("Round")
	MainFrame.Name = "MainFrame"
	MainFrame.Size = UDim2.fromOffset(0, SizeY)
	MainFrame.Position = UDim2.fromScale(0.5, 0.5) - UDim2.fromOffset(SizeX / 2, SizeY / 2)
	MainFrame.ImageColor3 = Theme.MainFrame
	MainFrame.Parent = NewInstance

	TweenService:Create(MainFrame, TweenInfo.new(1), {Size = UDim2.fromOffset(SizeX, SizeY)}):Play()

	wait(1)

	local MainShadow = Objects.new("Shadow")
	MainShadow.ImageColor3 = Theme.MainFrame
	MainShadow.Parent = MainFrame

	local TitleBar = Objects.new("SmoothButton")
	TitleBar.Name = "TitleBar"
	TitleBar.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(0, 30)
	TitleBar.ImageColor3 = Theme.TitleBar
	TitleBar.ImageTransparency = 1
	TitleBar.Parent = MainFrame

	local ExtraBar = Objects.new("Frame")
	ExtraBar.Name = "Hidden"
	ExtraBar.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(0, 5)
	ExtraBar.Position = UDim2.fromScale(0, 1) - UDim2.fromOffset(0, 5)
	ExtraBar.BackgroundColor3 = Theme.TitleBar
	ExtraBar.Parent = TitleBar

	local TitleShadow = Objects.new("Shadow")
	TitleShadow.ImageColor3 = Theme.TitleBar
	TitleShadow.ImageTransparency = 1
	TitleShadow.Parent = TitleBar

	local TitleText = Objects.new("Button")
	TitleText.Name = "Title"
	TitleText.Text = Title
	TitleText.TextColor3 = Theme.TitleBarAccent
	TitleText.TextTransparency = 1
	TitleText.Font = Enum.Font.GothamBold
	TitleText.Parent = TitleBar

	TitleText.MouseButton1Down:Connect(function ()
		local Mx, My = Mouse.X, Mouse.Y
		local MouseMove, MouseKill
		
		MouseMove = Mouse.Move:Connect(function ()
			local nMx, nMy = Mouse.X, Mouse.Y
			local Dx, Dy = nMx - Mx, nMy - My
			MainFrame.Position = MainFrame.Position + UDim2.fromOffset(Dx, Dy)
			Mx, My = nMx, nMy
		end)
		MouseKill = InputService.InputEnded:Connect(function (UserInput)
			if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
				MouseMove:Disconnect()
				MouseKill:Disconnect()
			end
		end)
	end)
	local MinimiseButton = Objects.new("SmoothButton")
	MinimiseButton.Size = UDim2.fromOffset(20, 20)
	MinimiseButton.Position = UDim2.fromScale(1, 0) + UDim2.fromOffset(-25, 5)
	MinimiseButton.ImageColor3 = Theme.Minimise
	MinimiseButton.ImageTransparency = 1
	MinimiseButton.Parent = TitleBar

	local MinimiseShadow = Objects.new("Shadow")
	MinimiseShadow.ImageColor3 = Theme.MinimiseAccent
	MinimiseShadow.ImageTransparency = 1
	MinimiseShadow.Parent = MinimiseButton

	MinimiseButton.MouseButton1Down:Connect(function ()
		Open = not Open

		TweenService:Create(MainShadow, TweenInfo.new(0.15), {ImageTransparency = 1}):Play()
		TweenService:Create(MainFrame, TweenInfo.new(0.15), {Size = Open and UDim2.fromOffset(SizeX, SizeY) or UDim2.fromOffset(SizeX, 30)}):Play()
		TweenService:Create(MinimiseButton, TweenInfo.new(0.15), {ImageColor3 = Open and Theme.Minimise or Theme.Maximise}):Play()
		TweenService:Create(MinimiseShadow, TweenInfo.new(0.15), {ImageColor3 = Open and Theme.MinimiseAccent or Theme.MaximiseAccent}):Play()

		if Open then
			wait(0.15)
			MainFrame.ClipsDescendants = false

			TweenService:Create(MainShadow, TweenInfo.new(0.15), {ImageTransparency = 0}):Play()
		else
			MainFrame.ClipsDescendants = true
		end
	end)
	local Content = Objects.new("Round")
	Content.Name = "Content"
	Content.ImageColor3 = Theme.Content
	Content.Size = UDim2.fromScale(1, 1) - UDim2.fromOffset(10, 75)
	Content.Position = UDim2.fromOffset(5, 70)
	Content.ImageTransparency = 1
	Content.Parent = MainFrame

	local NavigationBar, NavigationBarContent, NavBarMenu, NavBarOverlay = NavBar[Styles[Style]]()
	NavigationBar.Parent = MainFrame

	TweenService:Create(TitleBar, TweenInfo.new(1), {ImageTransparency = 0}):Play()
	TweenService:Create(ExtraBar, TweenInfo.new(1), {BackgroundTransparency = 0}):Play()
	TweenService:Create(TitleShadow, TweenInfo.new(1), {ImageTransparency = 0}):Play()
	TweenService:Create(TitleText, TweenInfo.new(1), {TextTransparency = 0}):Play()
	TweenService:Create(MinimiseButton, TweenInfo.new(1), {ImageTransparency = 0}):Play()
	TweenService:Create(MinimiseShadow, TweenInfo.new(1), {ImageTransparency = 0}):Play()
	TweenService:Create(Content, TweenInfo.new(1), {ImageTransparency = 0.8}):Play()

	wait(1)

	if NavBarMenu then
		TweenService:Create(TitleText, TweenInfo.new(0.5), {Size = TitleText.Size - UDim2.fromOffset(25, 0), Position = TitleText.Position + UDim2.fromOffset(25, 0)}):Play()
		TweenService:Create(Content, TweenInfo.new(0.5), {Size = Content.Size + UDim2.fromOffset(0, 35), Position = Content.Position - UDim2.fromOffset(0, 35)}):Play()

		NavBarMenu.ImageTransparency = 1
		NavBarMenu.Parent = TitleBar

		TweenService:Create(NavBarMenu, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()

		NavBarOverlay.Parent = MainFrame
		local MenuToggle = false

		NavBarMenu.MouseButton1Down:Connect(function ()
			MenuToggle = not MenuToggle

			TweenService:Create(NavigationBar, TweenInfo.new(0.15), {Size = (MenuToggle and UDim2.fromScale(0.5, 1) or UDim2.fromScale(0, 1)) - UDim2.fromOffset(0, 30)}):Play()
			TweenService:Create(NavBarOverlay, TweenInfo.new(0.15), {BackgroundTransparency = MenuToggle and 0.5 or 1}):Play()

			if MenuToggle then
				wait(0.15)
				NavigationBar.ClipsDescendants = false
			else
				NavigationBar.ClipsDescendants = true
			end
		end)
	end
	local TabCount = 0
	local TabLibrary = {}
	local ButtonTrack = {}
	local PageTrack = {}

	function TabLibrary:CreateBanner(BannerConfig)
		local BannerText = BannerConfig.Text
		local BannerOptions = BannerConfig.Options or {}

		local ExistingBanner, ExistingBannerOverlay = MainFrame:FindFirstChild("BannerOverlay"), MainFrame:FindFirstChild("Banner")

		if ExistingBanner then
			ExistingBanner:Destroy()
		end
		if ExistingBannerOverlay then
			ExistingBannerOverlay:Destroy()
		end
		local BannerOverlay = Objects.new("Frame")
		BannerOverlay.Name = "BannerOverlay"
		BannerOverlay.BackgroundColor3 = Theme.BannerAccent
		BannerOverlay.Size = UDim2.fromScale(1, 1) - UDim2.fromOffset(0, 30)
		BannerOverlay.Position = UDim2.fromOffset(0, 30)
		BannerOverlay.ZIndex = 75
		BannerOverlay.Parent = MainFrame

		local TextSize = TextService:GetTextSize(BannerText, 12, Enum.Font.Gotham, Vector2.new(0,0)).X
		local Lines = math.ceil((TextSize) / (MainFrame.AbsoluteSize.X - 10))

		local BannerSize = UDim2.fromScale(1, 0) + UDim2.fromOffset(-10, (Lines * 20) + 40)
		local BannerPosition = UDim2.fromScale(0, 1) + UDim2.fromOffset(5, (-Lines * 20) - 45)

		local Banner = Objects.new("Round")
		Banner.Name = "Banner"
		Banner.ImageTransparency = 1
		Banner.ImageColor3 = Theme.Banner
		Banner.Size = BannerSize
		Banner.Position = BannerPosition
		Banner.ZIndex = 80
		Banner.Parent = MainFrame

		local BannerLabel = Objects.new("Label")
		BannerLabel.Name = "Value"
		BannerLabel.Text = BannerText
		BannerLabel.TextColor3 = Theme.BannerAccent
		BannerLabel.TextSize = 12
		BannerLabel.Font = Enum.Font.Gotham
		BannerLabel.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(-5, (Lines * 20) + 5)
		BannerLabel.TextWrapped = true
		BannerLabel.Position = UDim2.fromOffset(5, 0)
		BannerLabel.TextTransparency = 1
		BannerLabel.ZIndex = 80
		BannerLabel.Parent = Banner

		TweenService:Create(BannerOverlay, TweenInfo.new(0.5), {BackgroundTransparency = 0.5}):Play()
		TweenService:Create(Banner, TweenInfo.new(0.5), {ImageTransparency = 0}):Play()
		TweenService:Create(BannerLabel, TweenInfo.new(0.5), {TextTransparency = 0}):Play()

		local BannerContainer = Objects.new("Frame")
		BannerContainer.Name = "Options"
		BannerContainer.Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(-10, 0)
		BannerContainer.Position = UDim2.fromScale(0, 1) - UDim2.fromOffset(-5, 35)
		BannerContainer.ZIndex = 80
		BannerContainer.ClipsDescendants = true
		BannerContainer.Parent = Banner

		local BannerList = Objects.new("UIListLayout")
		BannerList.FillDirection = Enum.FillDirection.Horizontal
		BannerList.HorizontalAlignment = Enum.HorizontalAlignment.Right
		BannerList.SortOrder = Enum.SortOrder.LayoutOrder
		BannerList.Padding = UDim.new(0, 5)
		BannerList.Parent = BannerContainer

		BannerOptions["Ok"] = function()
			TweenService:Create(BannerContainer, TweenInfo.new(0.5), {Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(-10, 0)}):Play()
			TweenService:Create(BannerOverlay, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
			TweenService:Create(Banner, TweenInfo.new(0.5), {ImageTransparency = 1}):Play()
			TweenService:Create(BannerLabel, TweenInfo.new(0.5), {TextTransparency = 1}):Play()
		end
		table.foreach(BannerOptions, function(Option, Value)
			if typeof(Value) == "function" then
				local TextSize = TextService:GetTextSize(Option:upper(), 12, Enum.Font.GothamBold, Vector2.new(0, 0)).X

				local OptionItem = Objects.new("SmoothButton")
				OptionItem.ImageColor3 = Theme.BannerAccent
				OptionItem.ImageTransparency = 0.9
				OptionItem.Size = UDim2.fromOffset(TextSize + 10, 30)
				OptionItem.ZIndex = 80
				OptionItem.ClipsDescendants = true
				OptionItem.Parent = BannerContainer

				local OptionLabel = Objects.new("Label")
				OptionLabel.Text = Option:upper()
				OptionLabel.TextSize = 12
				OptionLabel.TextColor3 = Theme.BannerAccent
				OptionLabel.Font = Enum.Font.GothamBold
				OptionLabel.Size = UDim2.fromScale(1, 1)
				OptionLabel.Position = UDim2.fromScale(0, 0)
				OptionLabel.TextXAlignment = Enum.TextXAlignment.Center
				OptionLabel.ZIndex = 80
				OptionLabel.Parent = OptionItem

				OptionItem.MouseButton1Down:Connect(function()
					Value()
					CircleAnim(OptionItem, Theme.Banner)
				end)
			end
		end)
		TweenService:Create(BannerContainer, TweenInfo.new(0.5), {Size = UDim2.fromScale(1, 0) + UDim2.fromOffset(-10, 30)}):Play()
	end
	function TabLibrary:CreateTab(TabConfig)
		local ImageID = TabConfig.ID
		local Title = TabConfig.Title
		local Button

		if ImageID then
			if Title then
				local Settings = {
					TextSize = 12,
					Font = Enum.Font.GothamBold,
					Vector = Vector2.new(0, 0)
				}
				local TextSize = TextService:GetTextSize(Title:upper(), Settings.TextSize, Settings.Font, Settings.Vector).X

				Button = Objects.new("Button")
				Button.Name = Title:upper()
				Button.TextXAlignment = Enum.TextXAlignment.Right
				Button.TextSize = Settings.TextSize
				Button.Font = Settings.Font
				Button.Text = Title:upper()
				Button.Size = UDim2.fromScale(0, 1) + UDim2.fromOffset(TextSize + 35)
				Button.ZIndex = 200
				Button.TextTransparency = 1
			end
			local FetchURL = "rbxassetid://"..ImageID
			local Image = RunService:IsStudio() and "http://www.roblox.com/asset/?id=5472131383" or game:GetObjects(FetchURL)[1].Texture

			local NewImage = Objects.new(Button and "Round" or "SmoothButton")
			NewImage.Name = ImageID
			NewImage.BackgroundTransparency = 1
			NewImage.Size = UDim2.fromOffset(20, 20)
			NewImage.ScaleType = Enum.ScaleType.Stretch
			NewImage.Image = Image
			NewImage.ZIndex = 200
			NewImage.ImageTransparency = 1

			if Button then
				NewImage.Position = UDim2.fromScale(0, 0.5) - UDim2.fromOffset(0, 10)
				NewImage.Parent = Button
			else
				Button = NewImage
			end
		else
			local Settings = {
				TextSize = 12,
				Font = Enum.Font.GothamBold,
				Vector = Vector2.new(0, 0)
			}
			local TextSize = TextService:GetTextSize(Title:upper(), Settings.TextSize, Settings.Font, Settings.Vector).X
			Button = Objects.new("Button")
			Button.Name = Title:upper()
			Button.TextXAlignment = Enum.TextXAlignment.Center
			Button.TextSize = Settings.TextSize
			Button.Font = Settings.Font
			Button.Text = Title:upper()
			Button.Size = UDim2.fromScale(0, 1) + UDim2.fromOffset(TextSize + 10)
			Button.ZIndex = 200
			Button.TextTransparency = 1
		end
		Button.Parent = NavigationBarContent

		local PageContentFrame = Objects.new("Scroll")
		PageContentFrame.Name = Title:upper() or ImageID
		PageContentFrame.Visible = (TabCount == 0)
		PageContentFrame.ZIndex = 50
		PageContentFrame.Parent = Content

		table.insert(ButtonTrack, Button)
		table.insert(PageTrack, PageContentFrame)

		Button.MouseButton1Down:Connect(function()
			for _, Track in next, ButtonTrack do
				if not (Track == Button) then
					TweenService:Create(Track, TweenInfo.new(0.15), {TextTransparency = 0.5}):Play()

					pcall(function()
						TweenService:Create(Track:FindFirstChildWhichIsA("ImageLabel"), TweenInfo.new(0.15), {ImageTransparency = 0.5}):Play()
					end)
				else
					TweenService:Create(Track, TweenInfo.new(0.15), {TextTransparency = 0}):Play()

					pcall(function()
						TweenService:Create(Track:FindFirstChildWhichIsA("ImageLabel"), TweenInfo.new(0.15), {ImageTransparency = 0}):Play()
					end)
				end
			end
			for _, Track in next, PageTrack do
				Track.Visible = (Track == PageContentFrame)
			end
		end)
		local PagePadding = Objects.new("UIPadding")
		PagePadding.PaddingLeft = UDim.new(0, 5)
		PagePadding.PaddingRight = UDim.new(0, 5)
		PagePadding.PaddingTop = UDim.new(0, 5)
		PagePadding.PaddingBottom = UDim.new(0, 5)
		PagePadding.Parent = PageContentFrame

		local PageList = Objects.new("UIListLayout")
		PageList.SortOrder = Enum.SortOrder.LayoutOrder
		PageList.Padding = UDim.new(0, 5)
		PageList.Parent = PageContentFrame

		PageList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
			PageContentFrame.CanvasSize = UDim2.fromOffset(0, PageList.AbsoluteContentSize.Y + 10)
		end)
		TabCount = TabCount + 1
		local OptionLibrary = {}
	end

	return TabLibrary
end

return library
