--BreakSkill UI Library

--Made By xS_Killus

--Instances

local Client = game:GetService("Players").LocalPlayer
local Mouse = Client:GetMouse()
local input = game:GetService("UserInputService")
local run = game:GetService("RunService")
local tween = game:GetService("TweenService")
local tweeninfo = TweenInfo.new

--Util

local utility = {}

--Theme

local objects = {}

local themes = {
    Background = Color3.fromRGB(16, 16, 16),
    Accent = Color3.fromRGB(),
    LightContrast = Color3.fromRGB(),
    DarkContrast = Color3.fromRGB(),
    TextColor = Color3.fromRGB()
}

do
    function utility:Create(instance, prop, children)
        local object = Instance.new(instance)

        for i, v in pairs(prop or {}) do
            object[i] = v

            if typeof(v) == "Color3" then
                local theme = utility:Find(themes, v)

                if theme then
                    objects[theme] = objects[theme] or {}
                    objects[theme][i] = objects[theme][i] or setmetatable({}, {_mode = "k"})
                    table.insert(objects[theme][i], object)
                end
            end
        end
        for i, module in pairs(children or {}) do
            module.Parent = object
        end
        return object
    end
    function utility:Tween(instance, prop, duration, ...)
        tween:Create(instance, tweeninfo(duration, ...), prop):Play()
    end
    function utility:Wait()
        run.RenderStepped:Wait()
        return true
    end
    function utility:Find(table, val)
        for i, v in pairs(table) do
            if v == val then
                return i
            end
        end
    end
    function utility:Sort(pattern, vals)
        local new = {}
        pattern = pattern:lower()

        if pattern == "" then
            return vals
        end
        for i, val in pairs(vals) do
            if tostring(val):lower():find(pattern) then
                table.insert(new, val)
            end
        end
        return new
    end
    function utility:Pop(object, shrink)
        local clone = object:Clone()
        clone.AnchorPoint = Vector2.new(0.5, 0.5)
        clone.Size = clone.Size - UDim2.new(0, shrink, 0, shrink)
        clone.Position = UDim2.new(0.5, 0, 0.5, 0)
        clone.Parent = object
        clone:ClearAllChildren()
        object.ImageTransparency = 1
        utility:Tween(clone, {Size = object.Size}, 0.2)

        spawn(function ()
            wait(0.2)
            object.ImageTransparency = 0
            clone:Destroy()
        end)
        return clone
    end
    function utility:InitializeKeybind()
        self.keybinds = {}
        self.ended = {}

        input.InputBegan:Connect(function (key)
            if self.keybinds[key.KeyCode] then
                for i, bind in pairs(self.keybinds[key.KeyCode]) do
                    bind()
                end
            end
        end)
        input.InputEnded:Connect(function (key)
            if key.UserInputType == Enum.UserInputType.MouseButton1 then
                for i, callback in pairs(self.ended) do
                    callback()
                end
            end
        end)
    end
    function utility:BindToKey(key, callback)
        self.keybinds[key] = self.keybinds[key] or {}
        table.insert(self.keybinds[key], callback)

        return {
            UnBind = function ()
                for i, bind in pairs(self.keybinds[key]) do
                    if bind == callback then
                        table.remove(self.keybinds[key], i)
                    end
                end
            end
        }
    end
    function utility:KeyPressed()
        local key = input.InputBegan:Wait()

        while key.UserInputType ~= Enum.UserInputType.Keyboard do
            key = input.InputBegan:Wait()
        end
        wait()
        return key
    end
    function utility:DraggingEnabled(frame, parent)
        parent = parent or frame
        local dragging = false
        local dragInput, mousePos, framePos

        frame.InputBegan:Connect(function (input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                mousePos = input.Position
                framePos = parent.Position

                input.Changed:Connect(function ()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)
        frame.InputChanged:Connect(function (input)
            if input == dragInput and dragging then
                local delta = input.Position - mousePos
                parent.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
            end
        end)
    end
    function utility:DraggingEnded(callback)
        table.insert(self.ended, callback)
    end
end

--Classes

local library = {}
local sections = {}
local folders = {}

do
    library.__index = library

    function library:CreateWindow(title)
        local container = utility:Create("ScreenGui", {
            Name = title,
            Parent = game.CoreGui
        }, {
            utility:Create("ImageLabel", {
                Name = "Main",
                BackgroundTransparency = 1,
                Image = "rbxassetid://4641149554",
                ImageColor3 = themes.Background,
                ScaleType = Enum.ScaleType.Slice,
                SliceCenter = Rect.new(4, 4, 296, 296),
                Size = UDim2.new()
            })
        })
    end
end

return library
